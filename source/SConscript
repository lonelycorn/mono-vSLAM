Import("env")

#============================#
#     INTERNAL LIBRARIES     #
#============================#
internal_libs = []

internal_libs += env.mvSLAM_Library(
    target='mvSLAM_math',
    source=[
        './math/lie-group.cpp',
        './math/space.cpp',
    ]
)

internal_libs += env.mvSLAM_Library(
    target='mvSLAM_base',
    source=[
        './base/debug.cpp',
        './base/image.cpp',
        './base/gtsam.cpp',
        './base/string-manipulation.cpp',
        './base/parameter-manager.cpp',
    ]
)

internal_libs += env.mvSLAM_Library(
    target='mvSLAM_os',
    source=[
        './os/time.cpp',
        './os/event.cpp',
        './os/mutex.cpp',
        './os/directory-iterator.cpp',
    ]
)

internal_libs += env.mvSLAM_Library(
    target='mvSLAM_visualization',
    source=[
        './visualization/visualizer.cpp',
    ]
)

#==========================#
#     INTERNAL MODULES     #
#==========================#
mvSLAM_vision_files = [
    './vision/camera.cpp',
    './vision/visual-feature.cpp',
    './vision/sfm-solve.cpp',
    './vision/sfm-refine.cpp',
    './vision/pnp-solve.cpp',
    './vision/pnp-refine.cpp',
    './vision/ba.cpp',
    './vision/fundamental-matrix.cpp',
    './vision/estimator-RANSAC.cpp',
]

mvSLAM_back_end_files = [
    './back-end/data-type.cpp',
    './back-end/graph.cpp',
]

mvSLAM_front_end_files = [
    './front-end/data-type.cpp',
    './front-end/frame-manager.cpp',
    './front-end/camera-manager.cpp',
    './front-end/image-pair.cpp',
    './front-end/visual-odometer.cpp',
]

internal_modules = {
    "mvSLAM_vision" : [env.Object(s) for s in mvSLAM_vision_files],
    "mvSLAM_front_end" : [env.Object(s) for s in mvSLAM_front_end_files],
    "mvSLAM_back_end" : [env.Object(s) for s in mvSLAM_back_end_files],
}

Return(["internal_libs", "internal_modules"])
