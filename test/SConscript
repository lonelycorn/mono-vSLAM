Import("env")
targets = []

#===================#
#     UNIT TEST     #
#===================#
#env1 = env.Clone()
#test_unit_test = env1.Program('test-unit-test', ['test-unit-test.cpp'])
#run_test_unit_test = env1.UnitTest('test-unit-test.passed', 'test-unit-test')
#targets += run_test_unit_test
#Alias('test_unit_test', run_test_unit_test)

test_math = env.mvSLAM_UnitTest\
(
    'test-math',
    [
        'test-math.cpp',
        env.Object('../source/base/math.cpp'),
    ]
)
targets += test_math

test_svd = env.mvSLAM_UnitTest\
(
    'test-svd',
    [
        'test-svd.cpp',
    ]
)
targets += test_svd

test_camera = env.mvSLAM_UnitTest\
(
    'test-camera',
    [
        'test-camera.cpp',
        env.Object('../source/vision/camera.cpp'), # depends on the object file, so that it is only compiled once
        env.Object('../source/base/math.cpp'),
    ]
)
targets += test_camera

test_sfm = env.mvSLAM_UnitTest\
(
    'test-sfm',
    [
        'test-sfm.cpp',
        env.Object('unit-test-helper.cpp'),
        env.Object('../source/vision/sfm-solve.cpp'),
        env.Object('../source/vision/sfm-refine.cpp'),
        env.Object('../source/vision/camera.cpp'),
        env.Object('../source/vision/fundamental-matrix.cpp'),
        env.Object('../source/vision/estimator-RANSAC.cpp'),
        env.Object('../source/base/math.cpp'),
        env.Object('../source/base/debug.cpp'),
        env.Object('../source/base/gtsam.cpp'),
    ]
)
targets += test_sfm

test_pnp = env.mvSLAM_UnitTest\
(
    'test-pnp',
    [
        'test-pnp.cpp',
        env.Object('unit-test-helper.cpp'),
        env.Object('../source/vision/pnp-refine.cpp'),
        env.Object('../source/vision/pnp-solve.cpp'),
        env.Object('../source/vision/camera.cpp'),
        env.Object('../source/base/math.cpp'),
        env.Object('../source/base/debug.cpp'),
        env.Object('../source/base/gtsam.cpp'),
    ]
)
targets += test_pnp

test_directory_iterator = env.mvSLAM_UnitTest\
(
    'test-directory-iterator',
    [
        'test-directory-iterator.cpp',
        env.Object('../source/os/directory-iterator.cpp'),
    ]
)
env.Depends(test_directory_iterator, env.Glob('../data/sfm/*'))
targets += test_directory_iterator

test_frame_manager = env.mvSLAM_UnitTest\
(
    'test-frame-manager',
    [
        'test-frame-manager.cpp',
        env.Object('../source/front-end/frame-manager.cpp'),
        env.Object('../source/front-end/data-type.cpp'),
        env.Object('../source/vision/visual-feature.cpp'),
        env.Object('../source/base/image.cpp'),
        env.Object('../source/base/debug.cpp'),
        env.Object('../source/os/mutex.cpp'),
    ]
)
env.Depends(test_frame_manager, env.Glob('../data/tsukuba/*'))
targets += test_frame_manager

test_image_pair = env.mvSLAM_UnitTest\
(
    'test-image-pair',
    [
        'test-image-pair.cpp',
        env.Object('../source/front-end/image-pair.cpp'),
        env.Object('../source/front-end/frame-manager.cpp'),
        env.Object('../source/front-end/data-type.cpp'),
        env.Object('../source/vision/visual-feature.cpp'),
        env.Object('../source/vision/sfm-solve.cpp'),
        env.Object('../source/vision/sfm-refine.cpp'),
        env.Object('../source/vision/camera.cpp'),
        env.Object('../source/base/gtsam.cpp'),
        env.Object('../source/base/math.cpp'),
        env.Object('../source/base/image.cpp'),
        env.Object('../source/base/debug.cpp'),
        env.Object('../source/os/mutex.cpp'),
    ]
)
env.Depends(test_image_pair, env.Glob('../data/tsukuba/*'))
targets += test_image_pair


test_graph = env.mvSLAM_UnitTest\
(
    'test-graph',
    [
        'test-graph.cpp',
        env.Object('unit-test-helper.cpp'),
        env.Object('../source/back-end/graph.cpp'),
        env.Object('../source/back-end/data-type.cpp'),
        env.Object('../source/base/gtsam.cpp'),
        env.Object('../source/base/math.cpp'),
    ]
)
targets += test_graph

Return(['targets'])

