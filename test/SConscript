Import("env")
targets = []

#===================#
#     UNIT TEST     #
#===================#
#env1 = env.Clone()
#test_unit_test = env1.Program('test-unit-test', ['test-unit-test.cpp'])
#run_test_unit_test = env1.UnitTest('test-unit-test.passed', 'test-unit-test')
#targets += run_test_unit_test
#Alias('test_unit_test', run_test_unit_test)

#==============#
#     MATH     #
#==============#
targets += env.mvSLAM_UnitTest(
    target='test-signal-processing',
    source=[
        'test-signal-processing.cpp',
    ]
)

targets += env.mvSLAM_UnitTest(
    target='test-kalman-filter',
    source=[
        'test-kalman-filter.cpp',
        './unit-test-helper.cpp',
        '../source/math/lie-group.cpp',
    ]
)

targets += env.mvSLAM_UnitTest(
    target='test-lie-group',
    source=[
        'test-lie-group.cpp',
        '../source/math/lie-group.cpp',
    ]
)

targets += env.mvSLAM_UnitTest(
    target='test-svd',
    source=[
        'test-svd.cpp',
    ],
    external_libs=[
        'mvSLAM_external_opencv',
    ]
)

#==============#
#     BASE     #
#==============#

targets += env.mvSLAM_UnitTest(
    target='test-string-manipulation',
    source=[
        'test-string-manipulation.cpp',
        '../source/base/string-manipulation.cpp',
    ]
)

targets += env.mvSLAM_UnitTest(
    target='test-parameter-manager',
    source=[
        'test-parameter-manager.cpp',
        '../source/base/debug.cpp',
        '../source/base/string-manipulation.cpp',
        '../source/base/parameter-manager.cpp',
    ]
)

#================#
#     VISION     #
#================#

targets += env.mvSLAM_UnitTest(
    target='test-camera',
    source=[
        'test-camera.cpp',
        '../source/vision/camera.cpp',
        '../source/math/lie-group.cpp',
    ]
)

targets += env.mvSLAM_UnitTest(
    target='test-sfm',
    source=[
        'test-sfm.cpp',
        'unit-test-helper.cpp',
        '../source/vision/sfm-solve.cpp',
        '../source/vision/sfm-refine.cpp',
        '../source/vision/ba.cpp',
        '../source/vision/camera.cpp',
        '../source/vision/fundamental-matrix.cpp',
        '../source/vision/estimator-RANSAC.cpp',
        '../source/base/debug.cpp',
        '../source/base/gtsam.cpp',
    ],
    internal_libs=[
        'mvSLAM_math',
    ],
    external_libs=[
        'mvSLAM_external_opencv',
        'mvSLAM_external_gtsam',
        'mvSLAM_external_boost',
    ]
)

targets += env.mvSLAM_UnitTest(
    target='test-pnp',
    source=[
        'test-pnp.cpp',
        'unit-test-helper.cpp',
        '../source/vision/pnp-solve.cpp',
        '../source/vision/pnp-refine.cpp',
        '../source/vision/ba.cpp',
        '../source/vision/camera.cpp',
        '../source/base/debug.cpp',
        '../source/base/gtsam.cpp',
    ],
    internal_libs=[
        'mvSLAM_math',
    ],
    external_libs=[
        'mvSLAM_external_opencv',
        'mvSLAM_external_gtsam',
        'mvSLAM_external_boost',
    ]
)

#============#
#     OS     #
#============#
targets += env.mvSLAM_UnitTest(
    target='test-directory-iterator',
    source=[
        'test-directory-iterator.cpp',
        '../source/os/directory-iterator.cpp',
    ]
)
env.Depends('test-directory-iterator', env.Glob('../data/tsukuba/*'))

#===================#
#     FRONT END     #
#===================#
targets += env.mvSLAM_UnitTest(
    target='test-frame-manager',
    source=[
        'test-frame-manager.cpp',
        '../source/front-end/frame-manager.cpp',
        '../source/front-end/data-type.cpp',
        '../source/vision/visual-feature.cpp',
        '../source/base/image.cpp',
        '../source/base/debug.cpp',
        '../source/os/mutex.cpp',
    ],
    external_libs=[
        'mvSLAM_external_opencv',
        'mvSLAM_external_system',
    ]
)
env.Depends('test-frame-manager', env.Glob('../data/tsukuba/*'))

targets += env.mvSLAM_UnitTest(
    target='test-camera-manager',
    source=[
        'test-camera-manager.cpp',
        'unit-test-helper.cpp',
        '../source/front-end/camera-manager.cpp',
        '../source/vision/camera.cpp',
        '../source/base/debug.cpp',
        '../source/os/mutex.cpp',
    ],
    internal_libs=[
        'mvSLAM_math',
    ],
    external_libs=[
        'mvSLAM_external_system',
    ]
)
env.Depends('test-camera-manager', env.Glob('../data/camera_config/sample.txt'))

targets += env.mvSLAM_UnitTest(
    target='test-image-pair',
    source=[
        'test-image-pair.cpp',
        './unit-test-helper.cpp',
        '../source/front-end/image-pair.cpp',
        '../source/front-end/frame-manager.cpp',
        '../source/front-end/camera-manager.cpp',
        '../source/front-end/data-type.cpp',
        '../source/vision/visual-feature.cpp',
        '../source/vision/sfm-solve.cpp',
        '../source/vision/sfm-refine.cpp',
        '../source/vision/ba.cpp',
        '../source/vision/camera.cpp',
        '../source/os/mutex.cpp',
    ],
    internal_libs=[
        'mvSLAM_base',
        'mvSLAM_math',
    ],
    external_libs=[
        'mvSLAM_external_opencv',
        'mvSLAM_external_gtsam',
        'mvSLAM_external_boost',
        'mvSLAM_external_system',
    ]
)
env.Depends('test-image-pair', env.Glob('../data/tsukuba/*'))

targets += env.mvSLAM_UnitTest(
    target='test-visual-odometer',
    source=[
        'test-visual-odometer.cpp',
        'unit-test-helper.cpp',
        '../source/front-end/visual-odometer.cpp',
        '../source/front-end/image-pair.cpp',
        '../source/front-end/frame-manager.cpp',
        '../source/front-end/camera-manager.cpp',
        '../source/front-end/data-type.cpp',
        '../source/os/mutex.cpp',
    ],
    internal_modules=[
        'mvSLAM_vision',
    ],
    internal_libs=[
        'mvSLAM_base',
        'mvSLAM_math',
    ],
    external_libs=[
        'mvSLAM_external_opencv',
        'mvSLAM_external_gtsam',
        'mvSLAM_external_boost',
        'mvSLAM_external_system',
    ]
)
env.Depends('test-visual-odometer', env.Glob('../data/tsukuba/*'))

#==================#
#     BACK END     #
#==================#
targets += env.mvSLAM_UnitTest(
    target='test-graph',
    source=[
        'test-graph.cpp',
        'unit-test-helper.cpp',
        '../source/back-end/graph.cpp',
        '../source/back-end/data-type.cpp',
        '../source/base/gtsam.cpp',
    ],
    internal_libs=[
        'mvSLAM_math',
    ],
    external_libs=[
        'mvSLAM_external_gtsam',
        'mvSLAM_external_boost',
    ]
)

Return(['targets'])

